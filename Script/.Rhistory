plot(theta, post, type = "l", lty = 1, xlab = expression(theta), ylab = "density")
lines(theta, L, type = "l", lty = 2, axes = FALSE)
lines(theta, prior, type = "l", lty = 3, axes = FALSE)
legend(c("posterior", "likelihood", "prior"), lty = c(1, 2, 3))
y <- 15
n <- 43
theta <- seq(0, 1, by=0.01)
prior <- dbeta(theta, 2, 8)
L <- dbinom(y, n, theta)*50
post <- dbeta(theta, 2 + y, 8 + n - y)
plot(theta, post, type = "l", lty = 1, xlab = expression(theta), ylab = "density")
lines(theta, L, type = "l", lty = 2, axes = FALSE)
lines(theta, prior, type = "l", lty = 3, axes = FALSE)
legend("topright", c("posterior", "likelihood", "prior"), lty = c(1, 2, 3))
y <- 15
n <- 43
theta <- seq(0, 1, by=0.01)
prior <- dbeta(theta, 2, 8)
L <- dbinom(y, n, theta)*50
post <- dbeta(theta, 2 + y, 8 + n - y)
plot(theta, post, type = "l", lty = 1, xlab = expression(theta), ylab = "density",
main = expression(paste(pi, "(", theta, ") ~ Beta(2, 8)" )))
lines(theta, L, type = "l", lty = 2, axes = FALSE)
lines(theta, prior, type = "l", lty = 3, axes = FALSE)
legend("topright", c("posterior", "likelihood", "prior"), lty = c(1, 2, 3))
prior2 <- dbeta(theta, 8, 2)
post2 <- dbeta(theta, 8 + y, 2 + n - y)
plot(theta, post2, type = "l", lty = 1, xlab = expression(theta), ylab = "density",
main = expression(paste(pi, "(", theta, ") ~ Beta(8, 2)" )))
lines(theta, L, type = "l", lty = 2, axes = FALSE)
lines(theta, prior2, type = "l", lty = 3, axes = FALSE)
legend("topright", c("posterior", "likelihood", "prior"), lty = c(1, 2, 3))
y <- 15
n <- 43
theta <- seq(0, 1, by=0.01)
prior <- dbeta(theta, 2, 8)
L <- dbinom(y, n, theta)*50
post <- dbeta(theta, 2 + y, 8 + n - y)
plot(theta, L, type = "l", lty = 1, xlab = expression(theta), ylab = "density",
main = expression(paste(pi, "(", theta, ") ~ Beta(2, 8)" )))
lines(theta, post, type = "l", lty = 2, axes = FALSE)
lines(theta, prior, type = "l", lty = 3, axes = FALSE)
legend("topright", c("prior", "likelihood", "posterior"), lty = c(3, 1, 2))
#(b)
prior2 <- dbeta(theta, 8, 2)
post2 <- dbeta(theta, 8 + y, 2 + n - y)
plot(theta, L, type = "l", lty = 1, xlab = expression(theta), ylab = "density",
main = expression(paste(pi, "(", theta, ") ~ Beta(8, 2)" )))
lines(theta, post2, type = "l", lty = 2, axes = FALSE)
lines(theta, prior2, type = "l", lty = 3, axes = FALSE)
legend("topright", c("posterior", "likelihood", "prior"), lty = c(3, 1, 2))
post.mean <- mean(post)
post.mode <- mode(post)
post.sd <- sqrt(var(post))
warnings()
cup <- qbeta(0.975, 2 + y, 8 + n - y)
clo <- qbeta(0.025, 2 + y, 8 + n - y)
cup2 <- qbeta(0.975, 2 + y, 8 + n - y)
clo2 <- qbeta(0.025, 2 + y, 8 + n - y)
cup2 <- qbeta(0.975, 8 + y, 2 + n - y)
clo2 <- qbeta(0.025, 8 + y, 2 + n - y)
17/53
16/52
sqrt(17*36/53^2*54)
23/53
22/51
16/51
sqrt(23*30/53^2*54)
prior.mix <- 1/(4*beta(2, 8))*(3*theta*(1 - theta)^7 + theta^7*(1 - theta))
plot(theta, prior.mix, type = "l")
plot(theta, prior.mix, type = "l", ylab = "density", main = "mixture prior")
plot(theta, prior.mix, type = "l", xlab = expression(theta), ylab = "density", main = "mixture prior")
post.mix <- 1/(4*beta(2, 8))*choose(n, y)*(3*theta^16*(1 - theta)^35 + theta^22*(1 - theta)^29)
plot(theta, post.mix, type = "l", xlab = expression(theta), ylab = "density", main = "mixture posterior")
theta*post.mix
sum(theta*post.mix)
which(post.mix == max(post.mix))
which(post == max(post))
which(post2 == max(post2))
0.75*0.31 + 0.25*0.43
n1 <- 15
y1 <- 2
theta <- seq(0, 1, by=0.01)
post <- dbeta(theta, 1 + y1, 1 + n1 - y1)
plot(theta, post, type = "l", xlab = expression(theta), ylab = "posterior density")
3/17
2/15
sqrt(3*14/17^2*18)
sqrt((3*14)/(17^2*18))
sqrt((3*14)/(17^2*18))
sqrt((17*36)/(53^2*54))
sqrt((23*30)/(53^2*54))
which(theta == max(theta))
which(post == max(post))
n2 <- 278
y2 <- seq(0, 278, by = 1)
pred <- (gamma(n2 + 1)*gamma(17)*gamma(y2 + 3)*gamma(n2 - y2 + 14))/
gamma(y2 + 1)gamma(n2 - y2 + 1)*gamma(3)*gamma(14)*gamma(n2 + 17)
plot(y2, pred, type = "l", xlab = expression("y"[2]), ylab = "posterior predictive density")
n2 <- 278
y2 <- seq(0, 278, by = 1)
pred <- (gamma(n2 + 1)*gamma(17)*gamma(y2 + 3)*gamma(n2 - y2 + 14))/(
gamma(y2 + 1)*gamma(n2 - y2 + 1)*gamma(3)*gamma(14)*gamma(n2 + 17))
plot(y2, pred, type = "l", xlab = expression("y"[2]), ylab = "posterior predictive density")
n2 <- 278
y2 <- seq(1, 278, by = 1)
pred <- (gamma(n2 + 1)*gamma(17)*gamma(y2 + 3)*gamma(n2 - y2 + 14))/(
gamma(y2 + 1)*gamma(n2 - y2 + 1)*gamma(3)*gamma(14)*gamma(n2 + 17))
plot(y2, pred, type = "l", xlab = expression("y"[2]), ylab = "posterior predictive density")
n2 <- 278
y2 <- seq(0, 278, by = 1)
#pred <- (gamma(n2 + 1)*gamma(17)*gamma(y2 + 3)*gamma(n2 - y2 + 14))/(
#  gamma(y2 + 1)*gamma(n2 - y2 + 1)*gamma(3)*gamma(14)*gamma(n2 + 17))
pred <- beta(y2 + 3, n2 - y2 + 14)/((n2+1)*beta(3, 14)*beta(y2 + 1, n2 - y2 + 1))
plot(y2, pred, type = "l", xlab = expression("y"[2]), ylab = "posterior predictive density")
sum(pred)
sum(pred*y2)
sum(pred*((y2 - 49.06)^2))
sqrt(662.13)
?dbinom
theta.hat <- 2/15
L <- dbinom(y2, n2, theta.hat)
plot(y2, L, type = "l", xlab = expression("y"[2]), ylab = expression(paste("Pr(Y"[2], "=y"[2], "|", theta, "=", hat(theta))))
theta.hat <- 2/15
L <- dbinom(y2, n2, theta.hat)
plot(y2, L, type = "l", xlab = expression("y"[2]), ylab = expression(paste("Pr(Y"[2], "=y"[2], "|", theta, "=", hat(theta), ")")))
mean.y2 <- sum(L*y2)
sd.y2 <- sqrt(sum(L*((y2 - mean.y2)^2)))
mean.y2 <- sum(L*y2)
sd.y2 <- sqrt(sum(L*((y2 - mean.y2)^2)))
T <- c(1.53, 3.07, 6.18, 14.4)
R <- c(4.2, 6.7, 11, 19)
T^2
R^3
T^2/R^3
T <- c(1.53, 3.07, 6.18, 14.4)
R <- c(4.2, 6.7, 11, 19)
T2 <- T^2
R3 <- R^3
plot(R3, T2, type = "l", xlab = expression(paste("R"^"3", "(10"^"27", "m"^"3", ")")))
T2 <- T^2/10^2
R3 <- R^3/10^3
plot(R3, T2, type = "l", xlab = expression(paste("R"^"3", "(10"^"27", "m"^"3", ")")),
ylab = expression(paste("T"^"2", "(10"^"12", "s"^"2", ")")))
?rnorm
# hw4
# Lucy Lu
# 1
n <- 10000
mean <- 0
sd <- 1
x <- rnorm(n, mean, sd)
I <- sum(exp(-x^4))/n
I.var <- sum((exp(-x^4) - I)^2)/n
# hw4
# Lucy Lu
# 1
n <- 10000
mean <- 0
sd <- 10
x <- rnorm(n, mean, sd)
I <- sum(exp(-x^4))/n
I.var <- sum((exp(-x^4) - I)^2)/n
# hw4
# Lucy Lu
# 1
n <- 10000
mean <- 0
sd <- 10
x <- rnorm(n, mean, sd)
I <- sum(exp(-x^4))/n
I.var <- sum((exp(-x^4) - I)^2)/n
plot(x, exp(-x^4), type = "l")
x <- seq(-500, 500, by = 0.1)
I <- sum(exp(-x^4))/n
I.var <- sum((exp(-x^4) - I)^2)/n
plot(x, exp(-x^4), type = "l")
x <- seq(-1, 1, by = 0.1)
I <- sum(exp(-x^4))/n
I.var <- sum((exp(-x^4) - I)^2)/n
plot(x, exp(-x^4), type = "l")
x <- seq(-1, 1, by = 0.1)
I <- sum(exp(-x^4))/n
I.var <- sum((exp(-x^4) - I)^2)/n
plot(x, exp(-x^4), type = "l")
x <- seq(-500, 500, by = 0.1)
I <- sum(exp(-x^4))/n
I.var <- sum((exp(-x^4) - I)^2)/n
plot(x, exp(-x^4), type = "l")
function
end
?function
end
# hw4
# Lucy Lu
# 1
x <- seq(-500, 500, by = 0.1)
n <- length(x)
h <- function(x) {
return (exp(-x^4))
}
I <- sum(h(x))/n
I.var <- sum((h(x) - I)^2)/n
plot(x, h(x), type = "l")
# hw4
# Lucy Lu
# 1
x <- seq(-1, 1, by = 0.1)
n <- length(x)
h <- function(x) {
return (exp(-x^4))
}
I <- sum(h(x))/n
I.var <- sum((h(x) - I)^2)/n
plot(x, h(x), type = "l")
g1 <- runif(1000, -1, 1)
g2 <- rnorm(1000, 0, 1)
g3 <- rcauchy(1000, 0, 1)
a1 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dunif(x, -1, 1)
return (result)
}
a2 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dnorm(x, 0, 1)
return (result)
}
a3 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dcauchy(x, -1, 1)
return (result)
}
I1 <- sum(a1(g1))/1000
I2 <- sum(a2(g2))/1000
I3 <- sum(a3(g3))/1000
a1 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dunif(x, -1, 1)
return (result)
}
a2 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dnorm(x, 0, 1)
return (result)
}
a3 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dcauchy(x, 0, 1)
return (result)
}
I1 <- sum(a1(g1))/1000
I2 <- sum(a2(g2))/1000
I3 <- sum(a3(g3))/1000
pnorm(1, 0, 1) - pnorm(-1, 0, 1)
g1 <- runif(1000, -1, 1)
g2 <- rnorm(1000, 0, 5)
g3 <- rcauchy(1000, 0, 1)
a1 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dunif(x, -1, 1)
return (result)
}
a2 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dnorm(x, 0, 1)
return (result)
}
a3 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dcauchy(x, 0, 1)
return (result)
}
I1 <- sum(a1(g1))/1000
I2 <- sum(a2(g2))/1000
I3 <- sum(a3(g3))/1000
g1 <- runif(1000, -1, 1)
g2 <- rnorm(1000, 0, 5)
g3 <- rcauchy(1000, 0, 1)
a1 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dunif(x, -1, 1)
return (result)
}
a2 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dnorm(x, 0, 5)
return (result)
}
a3 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dcauchy(x, 0, 1)
return (result)
}
I1 <- sum(a1(g1))/1000
I2 <- sum(a2(g2))/1000
I3 <- sum(a3(g3))/1000
g1 <- runif(1000, -1, 1)
g2 <- rnorm(1000, 0, 5)
g3 <- rcauchy(1000, 0, 1)
a1 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dunif(x, -1, 1)
return (result)
}
a2 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dnorm(x, 0, 5)
return (result)
}
a3 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dcauchy(x, 0, 1)
return (result)
}
I1 <- sum(a1(g1))/1000
I2 <- sum(a2(g2))/1000
I3 <- sum(a3(g3))/1000
g1 <- runif(1000, -1, 1)
g2 <- rnorm(1000, 0, 5)
g3 <- rcauchy(1000, 0, 1)
a1 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dunif(x, -1, 1)
return (result)
}
a2 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dnorm(x, 0, 5)
return (result)
}
a3 <- function(x) {
result = (x>=-1)*(x<=1)*dnorm(x, 0, 1)/dcauchy(x, 0, 1)
return (result)
}
I1 <- sum(a1(g1))/1000
I2 <- sum(a2(g2))/1000
I3 <- sum(a3(g3))/1000
x <- seq(0, 1, 0.01)
f <- function(x) {
return (sin(pi*x)^2)
}
f.tilda <- f(x)
q <- dunif(x, 0, 1)
plot(x, f.tilda, type = "l", lty = 1)
lines(x, q, lty = 2)
x <- seq(0, 1, 0.01)
f <- function(x) {
return (sin(pi*x)^2)
}
f.tilda <- f(x)
q <- dunif(x, 0, 1)
plot(x, q, type = "l", lty = 1, ylab = "density")
lines(x, f.tilda, lty = 2)
legend("topright", c("uniform", "f(x)"), lty = c(1, 2))
?table
2.07/(sqrt(3.09)*sqrt(12.86))
66.76 - 0.33*66.66
rm(list = ls())
library(ggplot2)
load(file = 'galton.Rdata')
2.07/3.09
66.76 - 0.67*66.66
fit <- lm(Height ~ MeanParent, data = galton)
sum(fit$residuals)
sum(galton$Height) - sum(fit$fitted.values)
sum(galton$MeanParent * fit$residuals)
sum(fit$fitted.values * fit$residuals)
mean(galton$Height) - (fit$coef[1] + fit$coef[2]*mean(galton$MeanParent))
sum((galton$Height - mean(galton$Height))^2) - (sum((galton$Height - fit$fitted.values)^2) + sum((fit$fitted.values - mean(galton$Height))^2))
fit$coefficients
fit$coefficients[1]
fit$coefficients[[1]]
mean(galton$Height) - (fit$coef[[1]] + fit$coef[[2]]*mean(galton$MeanParent))
rm(list = ls())
library(ggplot2)
load(file = 'galton.Rdata')
fit <- lm(Height ~ MeanParent, data = galton)
summary(fit)
p <- ggplot(galton, aes(y = Height, x = MeanParent)) +
geom_point(color = 'blue', alpha = 0.5, size = 3) +
geom_abline(intercept = fit$coef[1], slope = fit$coef[2], size = 1, linetype = 'dashed')
p
rm(list = ls())
library(ggplot2)
load(file = 'galton.Rdata')
fit <- lm(Height ~ MeanParent, data = galton)
summary(fit)
p <- ggplot(galton, aes(y = Height, x = MeanParent)) +
theme_classic +
geom_point(color = 'blue', alpha = 0.5, size = 3) +
geom_abline(intercept = fit$coef[1], slope = fit$coef[2], size = 1, linetype = 'dashed')
rm(list = ls())
library(ggplot2)
load(file = 'galton.Rdata')
fit <- lm(Height ~ MeanParent, data = galton)
summary(fit)
p <- ggplot(galton, aes(y = Height, x = MeanParent)) +
theme_classic() +
geom_point(color = 'blue', alpha = 0.5, size = 3) +
geom_abline(intercept = fit$coef[1], slope = fit$coef[2], size = 1, linetype = 'dashed')
p
galton$residual_sign <- as.numeric(fit$residuals > 0)
View(galton)
View(galton)
rm(list = ls())
library(ggplot2)
load(file = 'galton.Rdata')
fit <- lm(Height ~ MeanParent, data = galton)
summary(fit)
galton$residual_sign <- as.numeric(fit$residuals > 0)
p <- ggplot(galton, aes(y = Height, x = MeanParent)) +
theme_classic() +
geom_point(color = residual_sign, alpha = 0.5, size = 3) +
geom_abline(intercept = fit$coef[1], slope = fit$coef[2], size = 1, linetype = 'dashed')
rm(list = ls())
library(ggplot2)
load(file = 'galton.Rdata')
fit <- lm(Height ~ MeanParent, data = galton)
summary(fit)
galton$residual_sign <- as.numeric(fit$residuals > 0)
p <- ggplot(galton, aes(y = Height, x = MeanParent, colour = residual_sign)) +
theme_classic() +
geom_point(alpha = 0.5, size = 3) +
geom_abline(intercept = fit$coef[1], slope = fit$coef[2], size = 1, linetype = 'dashed')
p
rm(list = ls())
library(ggplot2)
load(file = 'galton.Rdata')
fit <- lm(Height ~ MeanParent, data = galton)
summary(fit)
galton$Residual <- 'Negative'
galton$Residual[fit$residuals >= 0] <- 'Positive'
p <- ggplot(galton, aes(y = Height, x = MeanParent, colour = Residual)) +
theme_classic() +
geom_point(alpha = 0.5, size = 3) +
geom_abline(intercept = fit$coef[1], slope = fit$coef[2], size = 1, linetype = 'dashed')
p
rm(list = ls())
library(ggplot2)
load(file = 'galton.Rdata')
fit <- lm(Height ~ MeanParent, data = galton)
summary(fit)
galton$Residual <- 'Negative'
galton$Residual[fit$residuals >= 0] <- 'Positive'
p <- ggplot(galton, aes(y = Height, x = MeanParent, colour = Residual)) +
theme_classic() +
geom_point(alpha = 0.5, size = 3) +
geom_abline(intercept = fit$coef[1], slope = fit$coef[2], size = 1, linetype = 'dashed') +
xlab('Mean Parent Height')
p
shiny::runApp('Desktop/Research/Script/EDA')
setwd("/Users/luxinyi/Desktop/Research/Script")
rm(list = ls())
df <- read.csv("../Data/1997-1999 Tugidak_081916-Argos.csv")
## Missing data
df$DeployID[df$DeployID == ''] <- NA
df$LocationQuality[df$LocationQuality == ''] <- NA
sum(is.na(df$MsgCount))
sum(is.na(df$Latitude))
sum(is.na(df$Longitude))
sum(is.na(df$LocationQuality))
## Complete cases, convert date to POSIX
dfc <- df[, c('DeployID', 'Date', 'LocationQuality', 'Longitude', 'Latitude', 'Satellite')]
dfc <- dfc[complete.cases(dfc), ]
dfc$Date <- as.POSIXct(dfc$Date, tz = 'UTC', '%m/%d/%y %H:%M')
save(dfc, file = 'dfc.Rdata')
runApp('EDA')
runApp('EDA')
install.packages("leaflet")
runApp('EDA')
library(leaflet)
runApp('EDA')
setwd("/Users/luxinyi/Desktop/Research/Script/EDA")
rm(list = ls())
df <- read.csv("../Data/1997-1999 Tugidak_081916-Argos.csv")
## Missing data
df$DeployID[df$DeployID == ''] <- NA
df$LocationQuality[df$LocationQuality == ''] <- NA
sum(is.na(df$MsgCount))
sum(is.na(df$Latitude))
sum(is.na(df$Longitude))
sum(is.na(df$LocationQuality))
## Complete cases, convert date to POSIX
dfc <- df[, c('DeployID', 'Date', 'LocationQuality', 'Longitude', 'Latitude', 'Satellite')]
dfc <- dfc[complete.cases(dfc), ]
dfc$Date <- as.POSIXct(dfc$Date, tz = 'UTC', '%m/%d/%y %H:%M')
save(dfc, file = 'dfc.Rdata')
install.packages("geosphere")
?distm
?distm()
library(geosphere)
lon <- head(dfc$Longitude)
lat <- head(dfc$Latitude)
d <- distm(lon, lat, fun = distHaversine)
d <- distm(c(lon, lat), c(lon, lat), fun = distHaversine)
?distHaversine
d <- distm(c(lon[1], lat[1]), c(lon[2], lat[2]), fun = distHaversine)
dlon <- distm(c(lon[1], lat[1]), c(lon[2], lat[1]), fun = distHaversine)
dlat <- distm(c(lon[1], lat[1]), c(lon[1], lat[2]), fun = distHaversine)
sqrt(dlon^2 + dlat^2)
k <- length(lon)
hd <- rep(NA, k*(k - 1)/2)
ct <- 1
for (i in 1:(k - 1)){
for (j in (i + 1):k){
hd[ct] <- get_hd(c(lon[i], lon[j]), c(lat[i], lat[j]))
ct <- ct + 1
}
library(geosphere)
lon <- head(dfc$Longitude)
lat <- head(dfc$Latitude)
get_hd <- function(a, b){
# a is a vector of 2 longitudes, b is a vector of 2 latitudes
dx <- distm(c(a[1], b[1]), c(a[2], b[1]), fun = distHaversine)
dy <- distm(c(a[1], b[1]), c(a[1], b[2]), fun = distHaversine)
return (list('dx' = dx, 'dy' = dy))
}
k <- length(lon)
hd <- rep(NA, k*(k - 1)/2)
ct <- 1
for (i in 1:(k - 1)){
for (j in (i + 1):k){
hd[ct] <- get_hd(c(lon[i], lon[j]), c(lat[i], lat[j]))
ct <- ct + 1
}
}
View(dfc)
iuh
